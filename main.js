!function(){"use strict";var e=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_checkFormValidity(e){return e.every((e=>e.validity.valid))}disableSubmitButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}enableSubmitButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}resetValidation(){this._toggleButtonState(),this._inputEls.forEach((e=>{this._hideInputError(e)}))}_toggleButtonState(){this._checkFormValidity(this._inputEls)?this.enableSubmitButton():this.disableSubmitButton()}_setEventListeners(){this._inputEls=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners(),this._toggleButtonState()}};class t{constructor(e,t,s,i,r,n){this._name=e.name,this._link=e.link,this._ownerId=e.owner._id,this._cardId=e._id,this._likes=e.likes,this._templateSelector=t,this._handleImageClick=s,this._handleLike=r,this._handleDeleteCard=i,this._userId=n}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLike(this._cardId)})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteCard(this)})),this._cardImage.addEventListener("click",(()=>this._handleImageClick({name:this._name,link:this._link})))}deleteCard(){this._card.remove(),this._card=null}updateLikes(e){this._likes=e,this._renderLikes()}isLiked(){return this._likes.some((e=>e._id===this._userId))}_renderLikes(){this._likeNumber.textContent=this._likes.length,this.isLiked()?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}getView(){return this._card=document.querySelector(this._templateSelector).content.querySelector(".card").cloneNode(!0),this._cardTitle=this._card.querySelector(".card__title"),this._cardImage=this._card.querySelector(".card__image"),this._likeButton=this._card.querySelector(".card__like-button"),this._deleteButton=this._card.querySelector(".card__delete-button"),this._likeNumber=this._card.querySelector(".card__like-number"),this._ownerId!==this._userId&&this._deleteButton.remove(),this._renderLikes(),this._cardTitle.textContent=this._name,this._cardImage.alt=this._name,this._cardImage.src=this._link,this._setEventListeners(),this._card}}class s{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t),this._popupCloseButton=this._popupElement.querySelector(".modal__close")}open(){this._popupElement.classList.add("modal_opened"),this._popupElement.addEventListener("click",this._handleRemoteClose),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),this._popupElement.removeEventListener("click",this._handleRemoteClose),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};_handleRemoteClose=e=>{e.target.classList.contains("modal")&&this.close()};setEventListeners(){this._popupCloseButton.addEventListener("click",(()=>{this.close()}))}}class i extends s{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._saveButton=this._popupForm.querySelector(".modal__save")}close(){this._popupForm.reset(),super.close()}setButtonText(e){this._saveButton.textContent=e}_getInputValues(){return this._inputValues={},this._inputElements.forEach((e=>{this._inputValues[e.name]=e.value})),this._inputValues}setEventListeners(){super.setEventListeners(),this._inputElements=this._popupForm.querySelectorAll(".modal__form-input"),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}}const r=document.querySelector(".profile__avatar-container"),n=document.forms["update-avatar-form"],o=document.querySelector(".profile__rectangle"),a=document.querySelector("#modal__form-title"),l=document.querySelector("#modal__form-description"),h=document.forms["profile-form"],c=document.querySelector(".profile__add-button"),_=document.forms["card-form"],d=(document.querySelectorAll(".card__delete-button"),{inputSelector:".modal__form-input",submitButtonSelector:".modal__save",inactiveButtonClass:"modal__save_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"}),u=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._authorization=s.authorization,this._contentType=s["content-type"]}getUserInformation(){return fetch(`${this._baseUrl}/users/me`,{headers:{authorization:this._authorization,"content-type":this._contentType}}).then(this._handleServerResponse)}editUserInformation(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:{authorization:this._authorization,"content-type":this._contentType},body:JSON.stringify({name:e.title,about:e.subtitle})}).then(this._handleServerResponse)}addNewCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:{authorization:this._authorization,"content-type":this._contentType},body:JSON.stringify({name:e.name,link:e.link})}).then(this._handleServerResponse)}handleDeleteCard(e){return fetch(`${this._baseUrl}/cards/`+e,{method:"DELETE",headers:{authorization:this._authorization,"content-type":this._contentType}}).then(this._handleServerResponse)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:{authorization:this._authorization,"content-type":this._contentType}}).then(this._handleServerResponse)}handleSubmitLike(e){return fetch(`${this._baseUrl}/cards/likes/`+e,{method:"PUT",headers:{authorization:this._authorization,"content-type":this._contentType}}).then(this._handleServerResponse)}handleDeleteLike(e){return fetch(`${this._baseUrl}/cards/likes/`+e,{method:"DELETE",headers:{authorization:this._authorization,"content-type":this._contentType}}).then(this._handleServerResponse)}updateProfilePicture(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:{authorization:this._authorization,"content-type":this._contentType},body:JSON.stringify({avatar:e.avatar})}).then(this._handleServerResponse)}_handleServerResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",headers:{authorization:"02a3c077-82c6-4270-8df6-e8c1f2fec9e8","content-type":"application/json"}});let p;Promise.all([u.getUserInformation(),u.getInitialCards()]).then((e=>{let[t,s]=e;v.setUserInfo(t),v.setAvatar(t),p=t._id,m.renderItems(s.reverse())})).catch((e=>console.error(e)));const m=new class{constructor(e,t){let{renderer:s}=e;this._renderer=s,this._container=document.querySelector(t)}renderItems=e=>{e.forEach((e=>{this._renderer(e)}))};addItem(e){this._container.prepend(e)}}({renderer:e=>{const s=function(e){const s=new t(e,".card__template",(e=>{b.open(e)}),(e=>{f.open(),f.setSubmitAction((()=>{f.setButtonText("Deleting..."),u.handleDeleteCard(e._cardId).then((()=>{s.deleteCard(),f.close()})).finally((()=>{f.setButtonText("Yes")})).catch((e=>console.error(e)))}))}),(e=>{s.isLiked()?u.handleDeleteLike(e).then((e=>s.updateLikes(e.likes))).catch((e=>console.error(e))):u.handleSubmitLike(e).then((e=>s.updateLikes(e.likes))).catch((e=>console.error(e)))}),p);return s.getView()}(e);m.addItem(s)}},".gallery__cards"),v=new class{constructor(e){let{nameSelector:t,descriptionSelector:s,avatarSelector:i}=e;this._name=document.querySelector(t),this._description=document.querySelector(s),this._avatar=document.querySelector(i)}getUserInfo(){return{name:this._name.textContent,description:this._description.textContent}}setUserInfo(e){this._name.textContent=e.name,this._description.textContent=e.about}setAvatar(e){this._avatar.src=e.avatar}}({nameSelector:".profile__title",descriptionSelector:".profile__description",avatarSelector:".profile__avatar"}),S=new i("#modal__edit-profile",(e=>{S.setButtonText("Saving..."),u.editUserInformation(e).then((e=>{v.setUserInfo(e),v.setAvatar(e),S.close()})).finally((()=>{S.setButtonText("Save")})).catch((e=>console.error(e)))}));S.setEventListeners(),o.addEventListener("click",(()=>{S.open();const{description:e,name:t}=v.getUserInfo();a.value=t,l.value=e,k.resetValidation()}));const y=new i("#modal__new-item",(e=>{y.setButtonText("Creating..."),u.addNewCard(e).then((e=>{m.renderItems([e]),y.close()})).finally((()=>{y.setButtonText("Create")})).catch((e=>console.error(e)))}));y.setEventListeners(),c.addEventListener("click",(()=>{y.open(),L.resetValidation()}));const E=new i("#modal__update-avatar",(e=>{E.setButtonText("Saving..."),u.updateProfilePicture(e).then((e=>{u.getUserInformation(e).then((e=>{v.setAvatar(e),E.close()})).finally((()=>{E.setButtonText("Save")})).catch((e=>console.error(e)))}))}));E.setEventListeners(),r.addEventListener("click",(()=>{E.open()}));const f=new class extends s{constructor(e){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._saveButton=this._popupForm.querySelector(".modal__save")}setSubmitAction(e){this._submitAction=e}setButtonText(e){this._saveButton.textContent=e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",((e,t)=>{e.preventDefault(),this._submitAction(t)}))}}("#modal__delete-picture");f.setEventListeners();const b=new class extends s{constructor(e){super({popupSelector:e}),this._previewImage=this._popupElement.querySelector(".modal__picture"),this._previewCaption=this._popupElement.querySelector(".modal__image-description")}open(e){super.open(),this._previewImage.src=e.link,this._previewImage.alt=e.name,this._previewCaption.textContent=e.name}}("#modal__picture-popup");b.setEventListeners();const k=new e(d,h);k.enableValidation();const L=new e(d,_);L.enableValidation(),new e(d,n).enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,